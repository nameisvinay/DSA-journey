==================================================================
üß© Problem: Daily Temperatures  
üîó Link    : https://leetcode.com/problems/daily-temperatures/  
üìö Topic   : Stack (Monotonic Decreasing Stack)  
üìà Level   : Medium  
==================================================================

üìÑ Description:
Given a list of daily temperatures `T`, return a list `answer` such that `answer[i]` is the number of days 
you have to wait after the `i-th` day to get a warmer temperature.

If there is no future day for which this is possible, put 0 instead.

üìå Example:
Input : T = [73, 74, 75, 71, 69, 72, 76, 73]  
Output: [1, 1, 4, 2, 1, 1, 0, 0]

==================================================================
üß† My Initial Idea:

   if found next greater element than present element then get [greater element index - current index].

   bruteforce Approach: 

  ```python
     ans = [0]*len(temperatures)
     for i in range(len(temperatures)):
         for j in range(i+1 , len(temperatures)):  #i+1 --> because checks from next element
             if temperatures[i] < temperatures[j]:
                  ans[i] = j-i # once i reach next greater then break the loop and take in ans within i-th index
                  break
      return ans
  ```
- here in these approach time complexity is O(N^2) and space complexity is O(N) -> we took extra space to store days inbetween both.

   üëâ We don‚Äôt need to compare with every next element.
      If an element is less than or equal to the current one, it can‚Äôt affect the result, so we safely ignore it.
      That‚Äôs why we don‚Äôt need a full O(N) scan ‚Äî we only keep useful elements and discard the rest.
      
      This helps reduce unnecessary comparisons and improves efficiency. 

*** ‚úÖ This key observation leads us to use a stack.
Since we‚Äôre only interested in the most recent greater elements, a stack helps us efficiently track and discard irrelevant values while maintaining the right order.


  Dry-run:

    stack = []
    here im taking element into stack   ** but need to use indices to stack 
    our condition to get next warmer day:  stack[-1] < temp[i]


answer = [0   0   0   0   0   0   0   0]
          0   1   2   3   4   5   6   7
         [73, 74, 75, 71, 69, 72, 76, 73]
          ‚Üë
              
at index 0: 
        stack is empty                                               
        push 73 into stack                
                 0
      stack =   [73]


at index 1:
              0   1   2   3   4   5   6   7
             [73, 74, 75, 71, 69, 72, 76, 73]
                   ‚Üë

        check stack[-1] < temp[1]
        [73] < 74 yes . so pop 73 and replace 73 index at answer with 74 index - 73 index => 1-0 in ans[0] -> 73 gets popped.

                       1
              stack = [74]

      answer = [1   0   0   0   0   0   0   0]
      index     0   1   2   3   4   5   6   7

at index 2:
              0   1   2   3   4   5   6   7
             [73, 74, 75, 71, 69, 72, 76, 73]
                       ‚Üë

          check stack[-1] < temp[2]
          [74] < 75. yes .now pop 74 , and no other elements in stack less than 75 to get popped.

                       2
              stack = [75]   replace 74 index at answer with 75index - 74index => ans[1] = 2-1 -> 74 popped
  
        answer = [1   1   0   0   0   0   0   0]
         index    0   1   2   3   4   5   6   7  

at index 3:
              0   1   2   3   4   5   6   7
             [73, 74, 75, 71, 69, 72, 76, 73]
                          ‚Üë

        check stack[-1] < temp[3].
        [75] < 71   NO. 71 cannot pop 75 ,so push 71 into stack

                     2     3
            stack = [75 , 71]

at index 4 : 
              0   1   2   3   4   5   6   7
             [73, 74, 75, 71, 69, 72, 76, 73]
                               ‚Üë

                [75 , 71] > 69. so 69 cannot pop both.push into stack

                                  2   3   4
                         stack = [75, 71, 69]

at index 5: 
              0   1   2   3   4   5   6   7
             [73, 74, 75, 71, 69, 72, 76, 73]
                                   ‚Üë
               2   3   4     5
              [75, 71, 69] < 72. 72 can pop 71 and 69. 
                                 so at answer[3] = 5-3 = 2
                                       answer[4] = 5-4 = 1

              stack after popping and appending new :  [75,72]

        answer = [1   1   0   2   1   0   0   0]
         index    0   1   2   3   4   5   6   7

at index 6:
               0   1   2   3   4   5   6   7
             [73, 74, 75, 71, 69, 72, 76, 73]
                                       ‚Üë
               2   5     6
              [75, 72] < 76 , 76 can pop 75 and 72.
                              so at answer[2] = 6-2 = 4
                                    answer[5] = 6-5 = 1

              stack after popping and adding: [76]

        answer = [1   1   4   2   1   1   0   0]
        index     0   1   2   3   4   5   6   7

at index 7:
               0   1   2   3   4   5   6   7
             [73, 74, 75, 71, 69, 72, 76, 73]
                                           ‚Üë
               6 
              [76] > 73. 73 cannot pop 76. so both [76,73] be in stack which means 0



final answer:   

        answer = [1   1   4   2   1   1   0   0]    
         index    0   1   2   3   4   5   6   7


==================================================================
üõ†Ô∏è Final Code (Python):

      ```python
        ans=[0]*len(temp)
        stack = []
        for i in range(len(temp)):
            while stack and temp[stack[-1]] < temp[i]:
                ans[stack.pop()] = i-stack[-1]
            stack.append(i)
        return ans
