
==================================================================
🧩 Problem: 915. Partition Array into Disjoint Intervals  
🔗 Link   : https://leetcode.com/problems/partition-array-into-disjoint-intervals/  
📚 Topic  : Arrays  
📈 Level  : Medium  
==================================================================

### 📄 Description:

   Given an integer array nums, partition it into two (contiguous) subarrays left and right so that:
   
   Every element in left is less than or equal to every element in right.
   left and right are non-empty.
   left has the smallest possible size.
   Return the length of left after such a partitioning.
   
   Test cases are generated such that partitioning exists.

---

### ✅ Constraints:
- 2 ≤ `nums.length` ≤ 10⁵  
- 0 ≤ `nums[i]` ≤ 10⁶  
- A valid partition **always exists**.

---

### my initial idea:

   left and right pointers at index 0
   thought of updating every number with their previous greater number : 5 0 3 8 6
                                                                         5 5 5 8 8

    when greater meets stop left and move right.
    but this intuition doesnot help me.

    after that i look for hint in chatgpt without code.

then it suggested another input which helps me better understanding [90, 47, 69, 10, 43, 92, 31, 73, 61, 97]

### ✅ Approach:

           -  initialize overall_max and left_max with nums[0]. 
           -  check for next elements in an array if less than left_max or not . nums > left_maax.
           -  if found update overall_max with new greater number.
           -  but left_max remains at same position and partition too.
           -  if found any later number found less than left_max then it mean we can extend left_max now update left_max with overall_max
           -  update partition too
           -  if found next overall_max and not found any less than left_max numbers then its end of left part.
           -  now can return partition with + 1 as it is 0-indexed.


### 🧠 Dry Run:

#### 🔢 Input: (took from chatgpt for better visualization)

```py
nums = [90, 47, 69, 10, 43, 92, 31, 73, 61, 97]
```

| i | nums\[i] | overallMax | leftMax | Condition (nums\[i] < leftMax) | Action                                  |
| - | -------- | ---------- | ------- | ------------------------------ | --------------------------------------- |
| 0 | 90       | 90         | 90      | -                              | Init                                    |
| 1 | 47       | 90         | 90      | ✅ Yes                          | Extend left to i=1                      |
| 2 | 69       | 90         | 90      | ✅ Yes                          | Extend left to i=2                      |
| 3 | 10       | 90         | 90      | ✅ Yes                          | Extend left to i=3                      |
| 4 | 43       | 90         | 90      | ✅ Yes                          | Extend left to i=4                      |
| 5 | 92       | 92         | 90      | ❌ No                           | Update overallMax = 92                  |
| 6 | 31       | 92         | 90      | ✅ Yes                          | Extend left to i=6, update leftMax = 92 |
| 7 | 73       | 92         | 92      | ✅ Yes                          | Extend left to i=7                      |
| 8 | 61       | 92         | 92      | ✅ Yes                          | Extend left to i=8                      |
| 9 | 97       | 97         | 92      | ❌ No                           | Done                                    |

✅ Final left partition ends at index `8` → length = `9`

---

### 🧪 Final Split:

left  = [90, 47, 69, 10, 43, 92, 31, 73, 61]   (max = 92)
right = [97]                                  (min = 97)


✔️ Valid partition: `92 ≤ 97`

---

### ✅ Code (Python):

      ```python
      def partitionDisjoint(nums):
          leftMax = nums[0]
          overallMax = nums[0]
          partitionIdx = 0
          
          for i in range(1, len(nums)):
              overallMax = max(overallMax, nums[i])
              if nums[i] < leftMax:
                  leftMax = overallMax
                  partitionIdx = i
          
          return partitionIdx + 1
      ```

---

### 🔁 Time & Space Complexity:
                                * **Time:** O(n)
                                * **Space:** O(1)

---

### 🧠 Takeaway:

> Always extend `left` whenever an element breaks the condition.
> Use `overallMax` to update `leftMax` only **when needed**.

---

