

==================================================================
🧩 Problem : Minimum Number of Arrows to Burst Balloons
🔗 Link    : https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons/
📚 Topic   : Array , Greedy, Sorting
📈 Level   : Medium
==================================================================

---

📄 Description:
 Arrows can be shot up directly vertically (in the positive y-direction) from different points along the x-axis.
 A balloon with xstart and xend is burst by an arrow shot at x if x_start <= x <= x_end. There is no limit to the number of arrows that can be shot.
 A shot arrow keeps traveling up infinitely, bursting any balloons in its path.

Given the array points, return the minimum number of arrows that must be shot to burst all balloons.

Example 1:

  Input: points = [[10,16],[2,8],[1,6],[7,12]]
  Output: 2
  Explanation: The balloons can be burst by 2 arrows:
  - Shoot an arrow at x = 6, bursting the balloons [2,8] and [1,6].
  - Shoot an arrow at x = 11, bursting the balloons [10,16] and [7,12].


My initial idea: 

1. choose a number and check if it satisfies the condition "x_start <= x <= x_end" for each point.
2. if done with all points. count number of arrows can hit . then increment number and again check.
3. for every iteration, increment arrow count if any arrow can hit the ballon.


Also another idea is:

- merging intervals, at first i though of merging intervals by sorted and where previous end <= curr_start. and take [min(start,curr_start) , max(end,curr_end)]
though this was correct optimal approach but realized all are merging into one single interval. so this dont work.

- then took help from chatgpt and mentioned my ideas.
    1. it says instead of taking max(end,curr_end] pick min(end,curr_end) to tighten intervals.
    2. then i did [min(start,curr_start) , min(end,curr_end)] --> so reached intervals that dont merge and tighten overlapping.


suprising my two idea works one for bruteforce and other is optimal greedy.


###bruteforce 
```python
        points.sort(key = lambda x:x[1])
        arrow = 0
        visited = [False]*len(points)

        while not all(visited):
            i = 0
            while i < len(points) and visited[i]:
                i += 1
            
            if i == len(points):
                break

            # ✅ Choose right end, not left start
            x = points[i][1]
            for j in range(len(points)):
                if not visited[j] and points[j][0] <= x <= points[j][1]:
                    visited[j] = True
                    
            arrow += 1
        return arrow

flow after coding:
  1. loop over condition of checking till all points to visit.
  2. initalize with i = 0. for picking number within in points[x,y] range.
  3. now check for either it was not yet visited and number you choose is within range. mark it as visited.
  4. till 'i' reach to end(length of points).after every new iteration increment arrow count.

❗ Why it's slower:
  1.  Unnecessary min/max updates: You're modifying start and end in both if and else. These are not needed to count arrows — just extra          comparisons.
  2.  The min(start, curr_start) and max(end, curr_end) calls add constant-time overhead in every iteration.
  3.  You're simulating an actual merge process — which is heavier than needed for just counting arrows.
  4.  This approach is a hybrid between interval merging and greedy.


---

###Optimal approach(Greedy): #2 min()/max() -> ops	Merge + Greedy	Slower

```python
        points.sort()
        merge = [] #no need of this, i just included for better understandind in future
        start , end = points[0]
        arrow = 1

        for i in range(1,len(points)):
            curr_start,curr_end = points[i]

            if end >= curr_start:
                start = min(start,curr_start)
                end = min(end,curr_end)
            else:
                arrow += 1
                end = max(end,curr_end)
            
            merge.append([start,end])

        return arrow

flow after coding:
 1. start from 1st point.initalize start , end = points[0]
 2. loop from next points. by comparing with start and end. also update for everytime
 3. if current_start is greater than previous end. increment arrow count. and replace minimum of current end and previous end in place of       previous end.

#optimal --> tc -> O(nlogn) and sc -> o(1)  or O(n)-(if used new space)



🔥 Greedy Approach (Accepted): #1 comparison+ 1 assignment ->	Pure Greedy	-> ⚡ Faster
Sort all intervals by their end, and shoot an arrow at the end of the first balloon. Then skip all balloons that overlap with that shot.

```python
def findMinArrowShots(points):
    points.sort(key=lambda x: x[1])  # sort by end point
    arrows = 0
    prev_end = float('-inf')

    for start, end in points:
        if start > prev_end:  # need new arrow
            arrows += 1
            prev_end = end  # shoot arrow at the end of this interval

    return arrows

✅ Why it's faster:
 1. Only 1 comparison per iteration: start > prev_end
 2. No min, no max, no unnecessary variables
 3. Fully greedy: it always shoots the arrow at the rightmost possible point (end), and only if needed.
 4. It doesn’t track or merge intervals — just counts how many non-overlapping clusters exist.




IMPORTANT THING TO REMEMBER FOR NEXT TIME:
    1. merge based on points[1]. because it is the last possible chance for arrow to burst ballon.
    2. if previous end is less than current start. then it doesnot overlap which mean we need new arrow to burst. so increment arrow count.
    3. keep track of end position because it is last possibility to burst. intialize with float('-inf').
    4. update end with prev_end after every new greater start found.

 "Pick end of current balloon, and shoot only when needed."



          | Approach                                           | Time Complexity | Space  | Correctness |
          | -------------------------------------------------- | --------------- | ------ | ----------- |
          | Merge-style (`sort by start`, track `start`/`end`) | `O(n log n)`    | `O(1)` | ✅ Correct   |
          | Greedy (`sort by end`, single `end` pointer)       | `O(n log n)`    | `O(1)` | ✅ Correct   |



⚡ Difference in ms:
     - The greedy sort-by-end version avoids extra operations like min() and max() and is tighter in control flow, so it runs faster by a           few milliseconds.
     - But this is not a big deal in interviews or even production unless you're optimizing for millions of intervals.



